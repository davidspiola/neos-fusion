prototype(Webandco.Fusion:Component.Tag.A) < prototype(Webandco.Fusion:Component.Editable) {

    tagName = 'a'
    property = 'linkText'
    cssClass = 'link'
    cssModifier = Webandco.Fusion:ClassModifier
    linkTarget = false

    linkText = 'must-be-set'
    linkHref = '#'
    linkEnabled = true

    @styleguide {
        title = 'Tag: link'
        props {
            linkText = 'link text'
            linkHref = '#'
        }
    }

    renderer {
        tagName = ${props.tagName}

        // assign href
        attributes.href = Webandco.Fusion:Component.Tag.A.Href {
            linkHref = ${props.linkHref}
            linkEnabled = ${props.linkEnabled}
        }

        // assign target if set
        attributes.target = ${props.linkTarget}
        attributes.target.@if.isset = ${props.linkTarget != false}

        // assign content
        content = ${props.linkText}
    }
}

prototype(Webandco.Fusion:Component.Tag.A.Href) < prototype(Neos.Fusion:Component) {

    linkHref = 'must-be-set'
    linkEnabled = true

    renderer = Neos.Fusion:Case {

        inBackend {
            condition = ${props.isEditable && node.context.inBackend}
            renderer = ${'#inBackend'}
        }

        object {
            condition = ${Type.isObject(props.linkHref) && props.linkEnabled}
            renderer = Neos.Neos:NodeUri {
                node = ${props.linkHref}
            }
            renderer.@process.convertUris = Neos.Neos:ConvertUris {
                forceConversion = true
            }
        }

        node {
            condition = ${Type.isString(props.linkHref) && String.indexOf(props.linkHref, 'node')  >= 0 && props.linkEnabled}
            renderer = ${props.linkHref}
            renderer.@process.convertUris = Neos.Neos:ConvertUris {
                forceConversion = true
            }
        }

        resource {
            condition = ${String.indexOf(props.linkHref, 'resource') >= 0 && props.linkEnabled}
            renderer = Neos.Fusion:ResourceUri {
                path = ${props.linkHref}
            }
        }

        link {
            condition = ${String.indexOf(props.linkHref, 'http') >= 0}
            renderer = ${props.linkHref}
        }

        disabled {
            condition = ${!props.linkEnabled}
            renderer = ${'#disabled ' + props.linkHref}
        }

        default {
            condition = ${true}
            renderer = ${props.linkHref}
        }
    }
}

